#pragma once

#include <string_view>

namespace glrhi {
    constexpr static std::string_view m_vertexGbufferCode = "#version 460 core\n"
                                                            "\n"
                                                            "layout (location = 0) in vec3 a_pos;\n"
                                                            "layout (location = 1) in vec2 a_texUV;\n"
                                                            "layout (location = 2) in vec3 a_normal;\n"
                                                            "layout (location = 3) in vec3 a_tangent;\n"
                                                            "\n"
                                                            "out vec2 texUV;\n"
                                                            "out vec3 fragPos;\n"
                                                            "out mat3 TBN;\n"
                                                            "\n"
                                                            "layout (std140, binding=0) uniform cam {\n"
                                                            "    mat4 view;\n"
                                                            "    mat4 projection;\n"
                                                            "};\n"
                                                            "\n"
                                                            "uniform mat4 u_model;\n"
                                                            "\n"
                                                            "void main() {\n"
                                                            "    gl_Position = projection * view * u_model * vec4(a_pos, 1.0);\n"
                                                            "\n"
                                                            "    fragPos = vec3(u_model * vec4(a_pos, 1.0));\n"
                                                            "\n"
                                                            "    texUV = vec2(a_texUV.x, a_texUV.y);\n"
                                                            "\n"
                                                            "    vec3 T = normalize(vec3(u_model * vec4(a_tangent, 0.0)));\n"
                                                            "\tvec3 N = normalize(vec3(u_model * vec4(a_normal, 0.0)));\n"
                                                            "\tvec3 B = cross(T, N);\n"
                                                            "\tTBN = mat3(T, B, N);\n"
                                                            "\n"
                                                            "}";

        constexpr static std::string_view m_fragmentGbufferCode = "#version 460 core\n"
                                                                    "\n"
                                                                    "layout(location = 0) out vec3 g_albedo;\n"
                                                                    "layout(location = 1) out vec4 g_normalRoughness;\n"
                                                                    "layout(location = 2) out vec4 g_emissionMetallic;\n"
                                                                    "layout(location = 3) out vec3 g_position;\n"
                                                                    "layout(location = 4) out vec3 g_resoult;\n"
                                                                    "\n"
                                                                    "in vec2 texUV;\n"
                                                                    "in vec3 fragPos;\n"
                                                                    "in mat3 TBN;\n"
                                                                    "\n"
                                                                    "layout (std140, binding=1) uniform mat {\n"
                                                                    "    vec4 albedo;\n"
                                                                    "    vec4 arm;\n"
                                                                    "    vec4 emission;\n"
                                                                    "\n"
                                                                    "    float hasAlbedo;\n"
                                                                    "    float hasARM;\n"
                                                                    "    float hasNormal;\n"
                                                                    "    float hasEmission;\n"
                                                                    "};\n"
                                                                    "\n"
                                                                    "uniform sampler2D u_albedo;\n"
                                                                    "uniform sampler2D u_arm;\n"
                                                                    "uniform sampler2D u_normal;\n"
                                                                    "uniform sampler2D u_emission;\n"
                                                                    "\n"
                                                                    "void main() \n"
                                                                    "{\n"
                                                                    "    if (texture(u_albedo, texUV).a == 0)\n"
                                                                    "        discard;\n"
                                                                    "\n"
                                                                    "    vec3 normal = texture(u_normal, texUV).rgb;\n"
                                                                    "\tnormal = normal * 2.0 - 1.0;\n"
                                                                    "\tnormal = normalize(TBN * normal);\n"
                                                                    "\n"
                                                                    "    vec4 albedoOut = texture(u_albedo, texUV) * hasAlbedo + albedo * (1-hasAlbedo);\n"
                                                                    "    vec4 armOut = texture(u_arm, texUV) * hasARM + arm * (1-hasARM);\n"
                                                                    "    vec4 emissionOut = texture(u_emission, texUV) * hasEmission + emission * (1-hasARM);\n"
                                                                    "\n"
                                                                    "    g_albedo = albedoOut.xyz;\n"
                                                                    "    g_normalRoughness = vec4(normal, arm.g);\n"
                                                                    "    g_emissionMetallic = vec4(emissionOut.xyz, arm.b);\n"
                                                                    "    g_position = fragPos;\n"
                                                                    "    g_resoult = albedoOut.xyz + g_emissionMetallic.xyz;\n"
                                                                    "}";
}