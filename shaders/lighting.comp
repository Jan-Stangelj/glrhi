#version 460 core

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct light {
    vec4 position;
    vec4 color;
    float strenght;
};

const float PI = 3.14159265359;

layout (std140, binding=0) uniform cam {
    mat4 view;
    mat4 projection;
    vec4 camPos;
};

layout (std140, binding = 2) uniform voxelSettings {
    float voxelGridSize;
    float voxelRes;
};

layout (std430, binding = 0) readonly buffer lights {
    vec4 sunDir;
    vec4 sunColor;
    float sunStrenght;

    light inLights[64];
};
uniform int u_numLights;

layout(rgba16f, binding = 0) uniform image2D u_resoult;

layout(binding = 0) uniform sampler2D u_albedo;
layout(binding = 1) uniform sampler2D u_normalRoughness;
layout(binding = 2)uniform sampler2D u_emissionMetallic;
layout(binding = 3)uniform sampler2D u_position;
layout(binding = 4)uniform sampler2D u_skybox;

layout(binding = 8) uniform sampler3D voxels;

vec3 calcLight(vec3 albedo, float roughness, float metallic, vec3 normal, vec3 radiance, vec3 lightDir, vec3 fragPos);

void main() {
    vec2 texUV = vec2(0.0);
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
    texUV.x = float(texelCoord.x)/(gl_NumWorkGroups.x);
    texUV.y = float(texelCoord.y)/(gl_NumWorkGroups.y);

    vec4 normalRoughness = texture(u_normalRoughness, texUV);
    vec4 emissionMetallic = texture(u_emissionMetallic, texUV);

    vec3 albedo = pow(texture(u_albedo, texUV).rgb, vec3(2.2));
    vec3 arm = vec3(1.0, normalRoughness.w, emissionMetallic.w);
    vec3 normal = normalRoughness.rgb;
    vec3 position = texture(u_position, texUV).rgb;

    vec3 resoult = vec3(0.0);

    // sun
    float voxelSize = voxelGridSize / voxelRes;
    float stepSize  = voxelSize * 0.5;
    int maxSteps    = int(voxelGridSize / stepSize);

    vec3 rayPos = position + normal * voxelSize;
    float visibility = 1.0;

    if (dot(normalize(sunDir.xyz), normal) > 0) {

        for (int i = 0; i < maxSteps; i++) {   
            vec3 uvw = (rayPos + voxelGridSize * 0.5) / voxelGridSize;

            if (any(lessThan(uvw, vec3(0.0))) || any(greaterThan(uvw, vec3(1.0))))
                break;

            vec4 voxelSample = texture(voxels, uvw);

            visibility *= (1.0 - voxelSample.a);

            if (visibility <= 0.01) {
                visibility = 0.00;
                break;
            }

            rayPos += sunDir.xyz * stepSize;
        }
    }

    resoult += calcLight(albedo, arm.g, arm.b, normal, sunColor.rgb * sunStrenght, sunDir.xyz, position) * visibility;

    // Point lights
	for (int i = 0; i < u_numLights; i++) {
		light l = inLights[i];

		vec3 lightDir = l.position.xyz - position;
		float distance = length(lightDir);
		float attenuation = l.strenght / pow(distance, distance);
        lightDir = normalize(lightDir);

        // Return if too far
        if (attenuation < 0.01)
            continue;

        // Return if facing away
        if (dot(lightDir, normal) <= 0.0)
            continue;

        // Shadows
        int maxSteps    = int(ceil(distance / stepSize));

        vec3 rayPos = position + normal * voxelSize;
        float visibility = 1.0;

        for (int i = 0; i < maxSteps; i++) {
            vec3 uvw = (rayPos + voxelGridSize * 0.5) / voxelGridSize;

            if (any(lessThan(uvw, vec3(0.0))) || any(greaterThan(uvw, vec3(1.0))))
                break;

            vec4 voxelSample = texture(voxels, uvw);

            visibility *= (1.0 - voxelSample.a);

            if (visibility <= 0.1) {
                visibility = 0.01;
                break;
            }

            rayPos += lightDir * stepSize;
        }

        resoult += calcLight(albedo, arm.g, arm.b, normal, l.color.xyz * attenuation, lightDir, position) * visibility;
	}

    resoult += emissionMetallic.xyz;

    if (position != vec3(0.0)) {
        imageStore(u_resoult, texelCoord, vec4(resoult, 1.0));
    }

}

// --------------------------------------------------------------------------------------------------------------------------
// --------------------------------------------------------------------------------------------------------------------------

float DistributionGGX(vec3 N, vec3 H, float roughness) {
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}
float GeometrySchlickGGX(float NdotV, float roughness) {
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom   = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}
float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NdotV, roughness);
    float ggx1 = GeometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}
vec3 fresnelSchlick(float cosTheta, vec3 F0) {
    return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
}

vec3 calcLight(vec3 albedo, float roughness, float metallic, vec3 normal, vec3 radiance, vec3 lightDir, vec3 fragPos) {

    vec3 N = normal;
    vec3 V = normalize(camPos.xyz - fragPos);

	vec3 F0 = vec3(0.04);
    F0 = mix(F0, albedo, metallic);

	// calculate per-light radiance
	vec3 L = normalize(lightDir);
	vec3 H = normalize(V + L);

	// Cook-Torrance BRDF
	float NDF = DistributionGGX(N, H, roughness);
	float G   = GeometrySmith(N, V, L, roughness);
	vec3 F    = fresnelSchlick(clamp(dot(H, V), 0.0, 1.0), F0);
		
	vec3 numerator    = NDF * G * F;
	float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001; // + 0.0001 to prevent divide by zero
	vec3 specular = numerator / denominator;
	
	// kS is equal to Fresnel
	vec3 kS = F;
	vec3 kD = vec3(1.0) - kS;

	kD *= 1.0 - metallic;

	// scale light by NdotL
	float NdotL = max(dot(N, L), 0.0);  

	return (kD * albedo / PI + specular) * radiance * NdotL;
}